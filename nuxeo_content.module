<?php
/**
 *@file
 *Nuxeo labs for Drupal integration by fvadon
 *Inspired by field_example module from git://git.drupal.org/project/examples.git
 */
require_once ('NuxeoAutomationAPI.php');

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param
 *        	path
 *        	Which path of the site we're using to display help
 * @param
 *        	arg
 *        	Array that holds the current path as returned from arg() function
 *        	
 */
function nuxeo_content_help($path, $arg) {
	switch ($path) {
		case "admin/help#nuxeo_content" :
			return '<p>' . t ( "Nuxeo content help" ) . '</p>';
			break;
	}
}

/**
 * Hook-menu Admin function to declare module settings.
 */
function nuxeo_content_menu() {

	$items = array();

	$items['admin/config/content/nuxeo_content'] = array(
			'title' => 'Nuxeo content module settings',
			'description' => 'Description of your Nuxeo Content settings page',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('nuxeo_content_admin'),
			'access arguments' => array('access administration pages'),
			'type' => MENU_NORMAL_ITEM,
	);

	return $items;
}

/**
 * Page callback nuxeo content settings
 * @see nuxeo_content_menu()
 */
function nuxeo_content_admin() {
	$form = array();

	$form['nuxeo_content_server_url_setting'] = array(
			'#type' => 'textfield',
			'#title' => t('Nuxeo server URL'),
			'#default_value' => variable_get('nuxeo_content_server_url_setting', "http://localhost:8080/nuxeo/"),
			'#size' => 40,
			'#description' => t("URL of the Nuxeo server to query for all the API calls."),
			'#required' => TRUE,
	);
	$form['nuxeo_content_user_setting'] = array(
			'#type' => 'textfield',
			'#title' => t('nuxeo_content_user_setting'),
			'#default_value' => variable_get('nuxeo_content_user_setting', "Administrator"),
			'#size' => 20,
			'#description' => t("User used for Nuxeo notification when Actions are used. It is recommended to use a reverse-proxy with header authentication instead"),
	);
	$form['nuxeo_content_pwd_setting'] = array(
			'#type' => 'password',
			'#title' => t('Password'),
			'#default_value' => variable_get('nuxeo_content_pwd_setting', "Administrator"),
			'#size' => 20,
			'#description' => t("PWD for User"),
	);
	
	$form['nuxeo_content_server_display'] = array(
			'#type' => 'select',
			'#title' => t('Content picker display'),
			'#options' => array(
			          "site/searchframe/select2screen" => t('Select 2 (recommended)'),
			         "site/searchframe/searchscreen" => t('Dynamic search screen'),
			       ),
	        '#default_value' => variable_get('nuxeo_content_server_display', "site/searchframe/select2screen"),
			'#size' => 2,
			'#description' => t("Select how the Nuxeo server will display the content picker."),
			'#required' => TRUE,

	);

	return system_settings_form($form);
}

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function nuxeo_content_field_info() {
	return array (
			// We name our field as the associative name of the array.
			'nuxeo_content_assetid' => array (
					'label' => t ( 'Nuxeo Asset ID' ),
					'description' => t ( 'The id of the asset the picture should be extracted from' ),
					'default_widget' => 'nuxeo_content_widget',
					'default_formatter' => 'nuxeo_content_formatter_text',
					'instance_settings' => array (
							'nuxeo_pic_size' => 'Small' 
					) 
			) 
	);
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * Here we always validate the field. We could shoud that it looks like a nuxeo ID
 * If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see field_example_field_widget_error()
 *
 */
function nuxeo_content_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
	foreach ( $items as $delta => $item ) {
		if (! empty ( $item ['assetid'] )) {
			if (! preg_match ( '/[[:alnum:]]/', $item ['assetid'] )) {
				$errors [$field ['field_name']] [$langcode] [$delta] [] = array (
						'error' => 'nuxeo_example_invalid',
						'message' => t ( 'Should be the Asset ID' ) 
				);
			}
		}
	}
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function nuxeo_content_field_is_empty($item, $field) {
	return empty ( $item ['assetid'] );
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have only one formatter
 * For now we store the ID manually, we should provide a better way to look
 * for the asset ID ( API calls, Iframe...)
 * Info of the view mode
 *
 * @see nuxeo_content_field_formatter_view()
 *
 */
function nuxeo_content_field_formatter_info() {
	return array (
			'nuxeo_content_formatter_text' => array (
					'label' => t ( 'Simple text-based formatter' ),
					'field types' => array (
							'nuxeo_content_assetid' 
					) 
			) 
	);
}

/**
 * Implements hook_field_formatter_view().
 * View mode of the widget.
 * One formatter is implemented, It gets the title from the ID
 * and it also create the direct link to the image on Nuxeo server
 * which means you have to authenticate to Nuxeo in parallel for now
 * (a proxy would be a better solution)
 *
 *
 * @see field_example_field_formatter_info()
 *
 */
function nuxeo_content_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array ();
	
	switch ($display ['type']) {
		// This formatter simply outputs the field as text for now
		case 'nuxeo_content_formatter_text' :
			$nuxeoServer = variable_get('nuxeo_content_server_url_setting', "http://localhost:8080/nuxeo/");
			$nuxeo_pic_size = $instance ['settings'] ['nuxeo_pic_size'];
			$pictureUrlExtension = 'nxpicsfile/default/';
			$searchframeURL = variable_get('nuxeo_content_server_display', "site/searchframe/select2screen");
			// $client = new NuxeoPhpAutomationClient ( $nuxeoServer . 'site/automation' );
			// $session = $client->getSession ( 'Administrator','Administrator'); Here as an exemple when the use of the Rest Apis is needed.
			foreach ( $items as $delta => $item ) {
				// Call Nuxeo API Example
				/*
				 * $answer = $session->newRequest ( "Document.Fetch" )->set ( 'params', 'value', $item ['assetid'] )->sendRequest ();
				 * $document = $answer->getDocument ( 0 );
				 * $value = sizeof ( $answer );
				 * $docTitle = $document->getTitle ();
				 */
				$element [$delta] = array (
						/*array (
								// We create a render array to produce the desired markup,
								// simple text for now.
								// See theme_html_tag().
								'#type' => 'html_tag',
								'#tag' => 'p',
								'#value' => $docTitle, 
						),*/
						array (
								// We create a render array to produce the desired markup,
								// Link to the image URL on Nuxeo
								// See theme_html_tag().
								'#type' => 'html_tag',
								'#tag' => 'img',
								'#attributes' => array (
										'src' => $nuxeoServer . $pictureUrlExtension . $item ['assetid'] . '/' . $nuxeo_pic_size . ':content/' 
								) 
						) 
				);
			}
			break;
	}
	return $element;
}

/**
 * Implements hook_field_widget_info().
 * Info of the edit mode
 *
 * @see nuxeo_content_field_widget_form()
 */
function nuxeo_content_field_widget_info() {
	return array (
			'nuxeo_content_text_widget' => array (
					'label' => t ( 'Asset ID' ),
					'field types' => array (
							'nuxeo_content_assetid' 
					) 
			),
			'nuxeo_content_iframe_widget' => array (
					'label' => t ( 'Iframe Asset ID' ),
					'field types' => array (
							'nuxeo_content_assetid' 
					) 
			) 
	);
}

/**
 * Implements hook_field_widget_form().
 * Edit Mode
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 * In our case we use a custom element type defined after
 * The form API reference can be found at;
 * https://api.drupal.org/api/drupal/developer%21topics%21forms_api_reference.html/7
 */
function nuxeo_content_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
	$nuxeoServer = variable_get('nuxeo_content_server_url_setting', "http://localhost:8080/nuxeo/");
	$pictureUrlExtension = 'nxpicsfile/default/';
	$searchframeURL = variable_get('nuxeo_content_server_display', "site/searchframe/select2screen");
	$value = isset ( $items [$delta] ['assetid'] ) ? $items [$delta] ['assetid'] : '';
	$widget = $element;
	$widget ['#delta'] = $delta;
	
	switch ($instance ['widget'] ['type']) {
		case 'nuxeo_content_text_widget' :
			$widget += array (
					'#type' => 'textfield',
					'#default_value' => $value,
					// Allow a slightly larger size that the field length to allow for some
					// configurations where all characters won't fit in input field.
					'#size' => 100,
					'#maxlength' => 2083 
			);
			break;
		case 'nuxeo_content_iframe_widget' :
			$widget += array (
					'#type' => 'nuxeo_asset_iframe_element',
					'#default_value' => $value,
					'#nuxeo_server_url' => $nuxeoServer 
			);
			break;
	}
	$element ['assetid'] = $widget;
	return $element;
}

/**
 * Implements hook_element_info() based on the textfield element info declaration.
 * https://www.drupal.org/node/169815
 * This hook is the description of the custom element where we declare that a custom theme function will be used to format it
 * Using http://nodesforbreakfast.com/article/2012/02/24/create-custom-form-api-elements-hookelementinfo-drupal-7 and
 * https://www.silviogutierrez.com/blog/custom-drupal-elements-forms/ as an example
 */
function nuxeo_content_element_info() {
	$types ['nuxeo_asset_iframe_element'] = array (
			'#input' => TRUE,
			'#autocomplete_path' => FALSE,
			'#process' => array (
					'ajax_process_form' 
			),
			'#theme' => 'nuxeo_asset_iframe_element',
			'#theme_wrappers' => array (
					'form_element' 
			) 
	);
	return $types;
}

/**
 * Theme hook to declare our custom formatter for the custom element
 */
function nuxeo_content_theme() {
	return array (
			'nuxeo_asset_iframe_element' => array (
					'render element' => 'element' 
			) 
	);
}

/**
 * Format a nuxeo_asset_iframe_element
 * This theme function generates the actual HTML for the custom element
 * Inspired from theme_fieldtext()
 */
function theme_nuxeo_asset_iframe_element($variables) {
	$element = $variables ['element'];
	$element ['#attributes'] ['type'] = 'text';
	element_set_attributes ( $element, array (
			'id',
			'name',
			'value',
			'size',
			'maxlength' 
	) );
	_form_set_class ( $element, array (
			'form-text' 
	) );
	
	$extra = '';
	$nuxeoServer = variable_get('nuxeo_content_server_url_setting', "http://localhost:8080/nuxeo/");
	$searchframeURL = variable_get('nuxeo_content_server_display', "site/searchframe/select2screen");
	$elementminid = str_replace ( "-", "", $element ['#attributes'] ['id'] );
	$output = '<input' . drupal_attributes ( $element ['#attributes'] ) . ' style="display: none;"/></br>' . '<iframe src="' . $nuxeoServer . $searchframeURL . '" width="800" height="300" id="' . $element ['#attributes'] ['id'] . '-iframe"><p>Your browser does not support iframes.</p></iframe><script>
		window.addEventListener( "message",
          function (e) {
			  if (e.origin+"/nuxeo/" == "' . $nuxeoServer . '" && e.data.parentId=="' . $elementminid . '"){
				  document.getElementById("' . $element ['#attributes'] ['id'] . '").value = e.data.documentId;
			  }	
          });
		  var nuxeoSearchFrame' . $elementminid . ' = document.getElementById("' . $element ['#attributes'] ['id'] . '-iframe");
		  var messageToSend' . $elementminid . ' = {parentId:"' . $elementminid . '", message:"' . $element ['#attributes'] ['value'] . '"};
		  nuxeoSearchFrame' . $elementminid . '.onload = function() {
		  nuxeoSearchFrame' . $elementminid . '.contentWindow.postMessage(messageToSend' . $elementminid . ',"*");
		  }		  
    	  </script>';
	return $output . $extra;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function nuxeo_content_field_instance_settings_form($field, $instance) {
	$settings = $instance ['settings'];
	
	$form ['nuxeo_pic_size'] = array (
			'#type' => 'select',
			'#title' => t ( 'Image Format' ),
			'#default_value' => $settings ['nuxeo_pic_size'],
			'#options' => array (
					'Thumb' => t ( 'Thumb' ),
					'Small' => t ( 'Small' ),
					'Medium' => t ( 'Medium' ) 
			),
			'#required' => TRUE,
			'#description' => t ( 'The size of the pic to display' ) 
	);
	return $form;
}

/**
 * Declaring 2 new actions to notify the server of content references modifications.
 */
function nuxeo_content_rules_action_info() {
	$actions = array (
			'nuxeo_content_actions_update_referenced_content' => array (
					'label' => t ( "Notify Nuxeo server for content referenced" ),
					'parameter' => array (
							'node' => array (
									'type' => 'node',
									'label' => t ( 'Node to update' ),
									'description' => t ( 'A node for which Nuxeo refs will be updated' ) 
							) 
					),
					'group' => t ( 'Nuxeo' ) 
			) ,
			'nuxeo_content_actions_delete_referenced_content' => array (
					'label' => t ( "Notify Nuxeo server for content deleted" ),
					'parameter' => array (
							'node' => array (
									'type' => 'node',
									'label' => t ( 'Node to update' ),
									'description' => t ( 'A node for which Nuxeo refs will be deleted' )
							)
					),
					'group' => t ( 'Nuxeo' )
			)
			
	);
	return $actions;
}

/**
 */
function nuxeo_content_actions_update_referenced_content($node) {
	$currentNodeRef = url ( 'node/' . $node->nid, array (
			'absolute' => True,
			'alias' => True 
	) );
	// We don't know how many assetIDs and what name they have, so we have to look for it
	// The only info is that the type ie assetid.
	
	$node_vars = get_object_vars ( $node );
	$asset_ids = array ();
	foreach ( $node_vars as $node_var ) {
		if (is_array ( $node_var )) {
			if (count ( $node_var ) > 0 and array_key_exists ( 'und', $node_var )) {
				if (count ( $node_var ['und'] ) > 0) {
					if (array_key_exists ( 'assetid', $node_var ['und'] [0] )) {
						foreach ( $node_var ['und'] as $assetIdElement )
							$asset_ids [] = $assetIdElement ['assetid'];
					}
				}
			}
		}
	}
	//Should not be hardcoded.
	$client = new NuxeoPhpAutomationClient ($nuxeoServer = variable_get('nuxeo_content_server_url_setting', "http://localhost:8080/nuxeo/") . 'site/automation' );
	$session = $client->getSession ( variable_get('nuxeo_content_user_setting', "Administrator"), variable_get('nuxeo_content_pwd_setting', "Administrator") );
	$session->newRequest ( "RemoveExternalReference" )->set ( 'params', 'ExternalReference', $currentNodeRef )->sendRequest ();
	foreach ( $asset_ids as $asset_id ) {
		$session->newRequest( "AddExternalReference" )->set('params', 'ExternalReference', $currentNodeRef )->set( 'params', 'DocumentUID', $asset_id)->set ( 'params', 'referenceLabel', $node->title )->set( 'params', 'externalSource', 'Drupal' )->sendRequest ();
	}
	drupal_set_message("Nuxeo server notifed about: $node->title.");
}

/**
 */
function nuxeo_content_actions_delete_referenced_content($node) {
	$currentNodeRef = url ( 'node/' . $node->nid, array (
			'absolute' => True,
			'alias' => True
	) );

	$client = new NuxeoPhpAutomationClient ( $nuxeoServer = variable_get('nuxeo_content_server_url_setting', "http://localhost:8080/nuxeo/") . 'site/automation'  );
	$session = $client->getSession ( variable_get('nuxeo_content_user_setting', "Administrator"), variable_get('nuxeo_content_pwd_setting', "Administrator")  );
	$session->newRequest ( "RemoveExternalReference" )->set ( 'params', 'ExternalReference', $currentNodeRef )->sendRequest ();

}

