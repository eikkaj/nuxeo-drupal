<?php
/**
*@file
*Nuxeo labs for Drupal integration by fvadon
*Inspired by field_example module from git://git.drupal.org/project/examples.git
*/

require_once('NuxeoAutomationAPI.php');

/**
* Implements hook_help().
*
* Displays help and module information.
*
* @param path 
*   Which path of the site we're using to display help
* @param arg 
*   Array that holds the current path as returned from arg() function
*/
function nuxeo_content_help($path, $arg) {
	switch ($path) {
		case "admin/help#nuxeo_content":
		return '<p>' . t("Nuxeo content help") . '</p>';
		break;
	}
} 

/**
* Implements hook_field_info().
*
* Provides the description of the field.
*/
function nuxeo_content_field_info() {
	return array(
		// We name our field as the associative name of the array.
		'nuxeo_content_assetid' => array(
			'label' => t('Nuxeo Asset ID'),
			'description' => t('The id of the asset the picture should be extracted from'),
			'default_widget' => 'nuxeo_content_widget',
			'default_formatter' => 'nuxeo_content_formatter_text',
		),
	);
}

/**
* Implements hook_field_validate().
*
* This hook gives us a chance to validate content that's in our
* field. We're really only interested in the $items parameter, since
* it holds arrays representing content in the field we've defined.
* Here we always validate the field. We could shoud that it looks like a nuxeo ID
* If the item validates, we do nothing. If it doesn't
* validate, we add our own error notification to the $errors parameter.
*
* @see field_example_field_widget_error()
*/
function nuxeo_content_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
	foreach ($items as $delta => $item) {
		if (!empty($item['assetid'])) {
			if (!preg_match('/[[:alnum:]]/', $item['assetid'])) {
				$errors[$field['field_name']][$langcode][$delta][] = array(
					'error' => 'field_example_invalid',
					'message' => t('Should be the Asset ID'),
				);
			}
		}
	}
}

/**
* Implements hook_field_is_empty().
*
* hook_field_is_emtpy() is where Drupal asks us if this field is empty.
* Return TRUE if it does not contain data, FALSE if it does. This lets
* the form API flag an error when required fields are empty.
*/
function nuxeo_content_field_is_empty($item, $field) {
	return empty($item['assetid']);
}

/**
* Implements hook_field_formatter_info().
*
* We need to tell Drupal that we have only one formatter
* For now we store the ID manually, we should provide a better way to look
* for the asset ID ( API calls, Iframe...)
* Info of the view mode
* @see nuxeo_content_field_formatter_view()
*/
function nuxeo_content_field_formatter_info() {
	return array(
		'nuxeo_content_formatter_text' => array(
			'label' => t('Simple text-based formatter'),
			'field types' => array('nuxeo_content_assetid'),
		)
	);
}

/**
* Implements hook_field_formatter_view().
* View mode of the widget.
* One formatter is implemented, It gets the title from the ID 
* and it also create the direct link to the image on Nuxeo server 
* which means you have to authenticate to Nuxeo in parallel for now 
* (a proxy would be a better solution)
* 
* 
* @see field_example_field_formatter_info()
*/
function nuxeo_content_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array();

	switch ($display['type']) {
		// This formatter simply outputs the field as text for now
		case 'nuxeo_content_formatter_text':
			$nuxeoServer='http://localhost:8080/nuxeo/';
			$pictureUrlExtension='nxpicsfile/default/';
			$smallSize='/Small:content/';
			$client = new NuxeoPhpAutomationClient($nuxeoServer.'site/automation');    
			$session = $client->getSession('Administrator','Administrator');
		
			foreach ($items as $delta => $item) {
				//Call Nuxeo API
				$answer = $session->newRequest("Document.Fetch")->set('params', 'value', $item['assetid'])->sendRequest();
				$document=$answer->getDocument(0);
				$value = sizeof($answer);
				$docTitle= $document->getTitle();
				
				$element[$delta] = array(
					array(
						// We create a render array to produce the desired markup,
						// simple text for now.
						// See theme_html_tag().
						'#type' => 'html_tag',
						'#tag' => 'p',
						'#value' => 'Nuxeo Asset Title'.$docTitle
					),
					array(
						// We create a render array to produce the desired markup,
						// Link to the image URL on Nuxeo
						// See theme_html_tag().
						'#type' => 'html_tag',
						'#tag' => 'img',
						'#attributes' => array(
							'src' => $nuxeoServer.$pictureUrlExtension.$item['assetid'].$smallSize
						)
					)
				);
					
		
			}
			break;
		}
		return $element;
	}

	/**
	* Implements hook_field_widget_info().
	* Info of the edit mode
	*
	* @see nuxeo_content_field_widget_form()
	*/
	function nuxeo_content_field_widget_info() {
		return array(
			'nuxeo_content_text_widget' => array(
				'label' => t('Asset ID'),
				'field types' => array('nuxeo_content_assetid'),
			),
		);
	}

	/**
	* Implements hook_field_widget_form().
	* Edit Mode
	* hook_widget_form() is where Drupal tells us to create form elements for
	* our field's widget.
	*
	* The form API reference can be found at; 
	* https://api.drupal.org/api/drupal/developer%21topics%21forms_api_reference.html/7
	*/
	function nuxeo_content_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
		$value = isset($items[$delta]['assetid']) ? $items[$delta]['assetid'] : '';

		$widget = $element;
		$widget['#delta'] = $delta;


		$widget += array(
			'#type' => 'textfield',
			'#default_value' => $value,
			// Allow a slightly larger size that the field length to allow for some
			// configurations where all characters won't fit in input field.
			'#size' => 100,
			'#maxlength' => 2083,
		);


		$element['assetid'] = $widget;
		return $element;
	}

